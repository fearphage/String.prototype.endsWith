var _assert = require('assert');
var assert = _assert.equal.bind(_assert, true);
var assertEquals = _assert.equal;
var assertFalse = _assert.equal.bind(_assert, false);
var assertThrows = _assert['throws'];

require('../endswith.js');

assertEquals(String.prototype.endsWith.length, 1);
assertFalse(String.prototype.propertyIsEnumerable('endsWith'));

assert('undefined'.endsWith());
assert('undefined'.endsWith(undefined));
assertFalse('undefined'.endsWith(null));
assertFalse('null'.endsWith());
assertFalse('null'.endsWith(undefined));
assert('null'.endsWith(null));

assertFalse('abc'.endsWith());

assert('abc'.endsWith(''), true);
assertFalse('abc'.endsWith('\0'), false);
assert('abc'.endsWith('c'), true);
assertFalse('abc'.endsWith('b'), false);
assertFalse('abc'.endsWith('ab'), false);
assert('abc'.endsWith('bc'), true);
assert('abc'.endsWith('abc'), true);
assertFalse('abc'.endsWith('bcd'), false);
assertFalse('abc'.endsWith('abcd'), false);
assertFalse('abc'.endsWith('bcde'), false);

assert('abc'.endsWith('', NaN));
assertFalse('abc'.endsWith('\0', NaN));
assertFalse('abc'.endsWith('c', NaN));
assertFalse('abc'.endsWith('b', NaN));
assertFalse('abc'.endsWith('a', NaN));
assertFalse('abc'.endsWith('ab', NaN));
assertFalse('abc'.endsWith('bc', NaN));
assertFalse('abc'.endsWith('abc', NaN));
assertFalse('abc'.endsWith('bcd', NaN));
assertFalse('abc'.endsWith('abcd', NaN));
assertFalse('abc'.endsWith('bcde', NaN));

assert('abc'.endsWith('', false));
assertFalse('abc'.endsWith('\0', false));
assertFalse('abc'.endsWith('c', false));
assertFalse('abc'.endsWith('b', false));
assertFalse('abc'.endsWith('a', false));
assertFalse('abc'.endsWith('ab', false));
assertFalse('abc'.endsWith('bc', false));
assertFalse('abc'.endsWith('abc', false));
assertFalse('abc'.endsWith('bcd', false));
assertFalse('abc'.endsWith('abcd', false));
assertFalse('abc'.endsWith('bcde', false));

assert('abc'.endsWith('', undefined));
assertFalse('abc'.endsWith('\0', undefined));
assert('abc'.endsWith('c', undefined));
assertFalse('abc'.endsWith('b', undefined));
assertFalse('abc'.endsWith('a', undefined));
assertFalse('abc'.endsWith('ab', undefined));
assert('abc'.endsWith('bc', undefined));
assert('abc'.endsWith('abc', undefined));
assertFalse('abc'.endsWith('bcd', undefined));
assertFalse('abc'.endsWith('abcd', undefined));
assertFalse('abc'.endsWith('bcde', undefined));

assert('abc'.endsWith('', null));
assertFalse('abc'.endsWith('\0', null));
assertFalse('abc'.endsWith('c', null));
assertFalse('abc'.endsWith('b', null));
assertFalse('abc'.endsWith('a', null));
assertFalse('abc'.endsWith('ab', null));
assertFalse('abc'.endsWith('bc', null));
assertFalse('abc'.endsWith('abc', null));
assertFalse('abc'.endsWith('bcd', null));
assertFalse('abc'.endsWith('abcd', null));
assertFalse('abc'.endsWith('bcde', null));

assert('abc'.endsWith('', -Infinity));
assertFalse('abc'.endsWith('\0', -Infinity));
assertFalse('abc'.endsWith('c', -Infinity));
assertFalse('abc'.endsWith('b', -Infinity));
assertFalse('abc'.endsWith('a', -Infinity));
assertFalse('abc'.endsWith('ab', -Infinity));
assertFalse('abc'.endsWith('bc', -Infinity));
assertFalse('abc'.endsWith('abc', -Infinity));
assertFalse('abc'.endsWith('bcd', -Infinity));
assertFalse('abc'.endsWith('abcd', -Infinity));
assertFalse('abc'.endsWith('bcde', -Infinity));

assert('abc'.endsWith('', -1));
assertFalse('abc'.endsWith('\0', -1));
assertFalse('abc'.endsWith('c', -1));
assertFalse('abc'.endsWith('b', -1));
assertFalse('abc'.endsWith('a', -1));
assertFalse('abc'.endsWith('ab', -1));
assertFalse('abc'.endsWith('bc', -1));
assertFalse('abc'.endsWith('abc', -1));
assertFalse('abc'.endsWith('bcd', -1));
assertFalse('abc'.endsWith('abcd', -1));
assertFalse('abc'.endsWith('bcde', -1));

assert('abc'.endsWith('', -0));
assertFalse('abc'.endsWith('\0', -0));
assertFalse('abc'.endsWith('c', -0));
assertFalse('abc'.endsWith('b', -0));
assertFalse('abc'.endsWith('a', -0));
assertFalse('abc'.endsWith('ab', -0));
assertFalse('abc'.endsWith('bc', -0));
assertFalse('abc'.endsWith('abc', -0));
assertFalse('abc'.endsWith('bcd', -0));
assertFalse('abc'.endsWith('abcd', -0));
assertFalse('abc'.endsWith('bcde', -0));

assert('abc'.endsWith('', +0));
assertFalse('abc'.endsWith('\0', +0));
assertFalse('abc'.endsWith('c', +0));
assertFalse('abc'.endsWith('b', +0));
assertFalse('abc'.endsWith('a', +0));
assertFalse('abc'.endsWith('ab', +0));
assertFalse('abc'.endsWith('bc', +0));
assertFalse('abc'.endsWith('abc', +0));
assertFalse('abc'.endsWith('bcd', +0));
assertFalse('abc'.endsWith('abcd', +0));
assertFalse('abc'.endsWith('bcde', +0));

assert('abc'.endsWith('', 1));
assertFalse('abc'.endsWith('\0', 1));
assertFalse('abc'.endsWith('c', 1));
assertFalse('abc'.endsWith('b', 1));
assert('abc'.endsWith('a', 1));
assertFalse('abc'.endsWith('ab', 1));
assertFalse('abc'.endsWith('bc', 1));
assertFalse('abc'.endsWith('abc', 1));
assertFalse('abc'.endsWith('bcd', 1));
assertFalse('abc'.endsWith('abcd', 1));
assertFalse('abc'.endsWith('bcde', 1));

assert('abc'.endsWith('', 2));
assertFalse('abc'.endsWith('\0', 2));
assertFalse('abc'.endsWith('c', 2));
assert('abc'.endsWith('b', 2));
assertFalse('abc'.endsWith('a', 2));
assert('abc'.endsWith('ab', 2));
assertFalse('abc'.endsWith('bc', 2));
assertFalse('abc'.endsWith('abc', 2));
assertFalse('abc'.endsWith('bcd', 2));
assertFalse('abc'.endsWith('abcd', 2));
assertFalse('abc'.endsWith('bcde', 2));

assert('abc'.endsWith('', +Infinity));
assertFalse('abc'.endsWith('\0', +Infinity));
assert('abc'.endsWith('c', +Infinity));
assertFalse('abc'.endsWith('b', +Infinity));
assertFalse('abc'.endsWith('a', +Infinity));
assertFalse('abc'.endsWith('ab', +Infinity));
assert('abc'.endsWith('bc', +Infinity));
assert('abc'.endsWith('abc', +Infinity));
assertFalse('abc'.endsWith('bcd', +Infinity));
assertFalse('abc'.endsWith('abcd', +Infinity));
assertFalse('abc'.endsWith('bcde', +Infinity));

assert('abc'.endsWith('', true));
assertFalse('abc'.endsWith('\0', true));
assertFalse('abc'.endsWith('c', true));
assertFalse('abc'.endsWith('b', true));
assert('abc'.endsWith('a', true));
assertFalse('abc'.endsWith('ab', true));
assertFalse('abc'.endsWith('bc', true));
assertFalse('abc'.endsWith('abc', true));
assertFalse('abc'.endsWith('bcd', true));
assertFalse('abc'.endsWith('abcd', true));
assertFalse('abc'.endsWith('bcde', true));

assert('abc'.endsWith('', 'x'));
assertFalse('abc'.endsWith('\0', 'x'));
assertFalse('abc'.endsWith('c', 'x'));
assertFalse('abc'.endsWith('b', 'x'));
assertFalse('abc'.endsWith('a', 'x'));
assertFalse('abc'.endsWith('ab', 'x'));
assertFalse('abc'.endsWith('bc', 'x'));
assertFalse('abc'.endsWith('abc', 'x'));
assertFalse('abc'.endsWith('bcd', 'x'));
assertFalse('abc'.endsWith('abcd', 'x'));
assertFalse('abc'.endsWith('bcde', 'x'));

assert('[a-z]+(bar)?'.endsWith('(bar)?'), true);
assertThrows(function() { '[a-z]+(bar)?'.endsWith(/(bar)?/); }, TypeError);
assert('[a-z]+(bar)?'.endsWith('[a-z]+', 6));
assertThrows(function() { '[a-z]+(bar)?'.endsWith(/(bar)?/); }, TypeError);
assertThrows(function() { '[a-z]+/(bar)?/'.endsWith(/(bar)?/); }, TypeError);

// https://mathiasbynens.be/notes/javascript-unicode#poo-test
var string = 'I\xF1t\xEBrn\xE2ti\xF4n\xE0liz\xE6ti\xF8n\u2603\uD83D\uDCA9';
assert(string.endsWith(''), true);
assertFalse(string.endsWith('\xF1t\xEBr'));
assert(string.endsWith('\xF1t\xEBr', 5));
assertFalse(string.endsWith('\xE0liz\xE6'));
assert(string.endsWith('\xE0liz\xE6', 16));
assert(string.endsWith('\xF8n\u2603\uD83D\uDCA9'), true);
assert(string.endsWith('\xF8n\u2603\uD83D\uDCA9', 23));
assertFalse(string.endsWith('\u2603'));
assert(string.endsWith('\u2603', 21));
assert(string.endsWith('\uD83D\uDCA9'), true);
assert(string.endsWith('\uD83D\uDCA9', 23));

assertThrows(function() { String.prototype.endsWith.call(undefined); }, TypeError);
assertThrows(function() { String.prototype.endsWith.call(undefined, 'b'); }, TypeError);
assertThrows(function() { String.prototype.endsWith.call(undefined, 'b', 4); }, TypeError);
assertThrows(function() { String.prototype.endsWith.call(null); }, TypeError);
assertThrows(function() { String.prototype.endsWith.call(null, 'b'); }, TypeError);
assertThrows(function() { String.prototype.endsWith.call(null, 'b', 4); }, TypeError);
assert(String.prototype.endsWith.call(42, '2'));
assertFalse(String.prototype.endsWith.call(42, '4'));
assertFalse(String.prototype.endsWith.call(42, 'b', 4));
assertFalse(String.prototype.endsWith.call(42, '2', 1));
assert(String.prototype.endsWith.call(42, '2'), true);
assertFalse(String.prototype.endsWith.call({ 'toString': function() { return 'abc'; } }, 'b', 0));
assertFalse(String.prototype.endsWith.call({ 'toString': function() { return 'abc'; } }, 'b', 1));
assert(String.prototype.endsWith.call({ 'toString': function() { return 'abc'; } }, 'b', 2));
assertThrows(function() { String.prototype.endsWith.call({ 'toString': function() { throw RangeError(); } }, /./); }, RangeError);
assertThrows(function() { String.prototype.endsWith.call({ 'toString': function() { return 'abc'; } }, /./); }, TypeError);

assertThrows(function() { String.prototype.endsWith.apply(undefined); }, TypeError);
assertThrows(function() { String.prototype.endsWith.apply(undefined, ['b']); }, TypeError);
assertThrows(function() { String.prototype.endsWith.apply(undefined, ['b', 4]); }, TypeError);
assertThrows(function() { String.prototype.endsWith.apply(null); }, TypeError);
assertThrows(function() { String.prototype.endsWith.apply(null, ['b']); }, TypeError);
assertThrows(function() { String.prototype.endsWith.apply(null, ['b', 4]); }, TypeError);
assert(String.prototype.endsWith.apply(42, ['2']));
assertFalse(String.prototype.endsWith.apply(42, ['4']));
assertFalse(String.prototype.endsWith.apply(42, ['b', 4]));
assertFalse(String.prototype.endsWith.apply(42, ['2', 1]));
assert(String.prototype.endsWith.apply(42, ['2']), true);
assertFalse(String.prototype.endsWith.apply({ 'toString': function() { return 'abc'; } }, ['b', 0]));
assertFalse(String.prototype.endsWith.apply({ 'toString': function() { return 'abc'; } }, ['b', 1]));
assert(String.prototype.endsWith.apply({ 'toString': function() { return 'abc'; } }, ['b', 2]));
assertThrows(function() { String.prototype.endsWith.apply({ 'toString': function() { throw RangeError(); } }, [/./]); }, RangeError);
assertThrows(function() { String.prototype.endsWith.apply({ 'toString': function() { return 'abc'; } }, [/./]); }, TypeError);
